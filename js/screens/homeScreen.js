import { StyleSheet, Button, Text, View } from 'react-native';
import React from 'react';
import Permissions from 'react-native-permissions';
import PushNotification from 'react-native-push-notification';
import Contacts from 'react-native-contacts';

import {bindActionCreators} from 'redux';
import { connect } from 'react-redux';

import * as Actions from '../actions/index';

class HomeScreen extends React.Component {
  static navigationOptions = {
    title: 'Home',
  };

  constructor(props) {
    super(props);
    this.state = {
      message: 'This text changes',
      notificationId: undefined,
    };
  }

  render() {
    let { message } = this.state;

    return (
      <View style={styles.container}>
        <Text>{message}</Text>
        <Text>{this.props.testMessage || 'How does this work'}</Text>
        <Button
          onPress={this.props.test}
          title="test redux"
          style={styles.button}/>
        <Text>{this.props.contactsPermisison || 'contacts permission??'}</Text>

        <Button
          onPress={this.props.requestContactsReadWrite}
          title="Request contacts permission"
          style={styles.button}/>
        <Button
          onPress={this.getContacts}
          title="Get contacts count"
          style={styles.button}/>
        <Text>Notification buttons</Text>
        <Button
          onPress={this.sendNotification}
          title="Send Notification!"
          style={styles.button}/>
        <Button
          onPress={this.sendScheduledNotification}
          title="Schedule Notification!"
          style={styles.button}/>
        <Button
          onPress={this.cancelNotification}
          title="Cancel scheduled notification"
          style={styles.button}/>
        <Button
          title="Go to Contacts"
          onPress={this.goToContacts}
        />
        <Button
          title="Go to app contacts"
          onPress={()=>{this.props.navigation.navigate('AppContacts')}}
        />
      </View>
    );
  }

  /**
   * METHODS
   */

  goToContacts = () => {
    this.props.navigation.navigate('Contacts', {
      itemId: 66,
      otherParam: "Whatever mate",
      permissions: this.state.permissions,
      requestPermissions: this.requestContactsPermission,
    });
  };

  requestContactsPermission = () => {
    Permissions.request('contacts').then(response => {
      // Returns once the user has chosen to 'allow' or to 'not allow' access
      // Response is one of: 'authorized', 'denied', 'restricted', or 'undetermined'
      this.setState({ permissions: response })
    })
  };

  getContacts = () => {
    this.setState({ message: 'Attempting contacts....' });
    Contacts.getAll((err, contacts) => {
      if (err) throw err;
      if (contacts && contacts.length && contacts.length > 0) {
        let contact = contacts[0];
        this.setState({ message: `Got ${contacts.length} contacts` });
      }
      else {
        this.setState({ message: `${JSON.stringify(contacts).slice(0, 40)}` });
      }
    });
  };

  sendNotification = () => {
    PushNotification.localNotification({
      /* Android Only Properties */
      id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      ticker: "My Notification Ticker", // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
      smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
      subText: "This is a subText", // (optional) default: none
      color: "red", // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      tag: 'some_tag', // (optional) add tag to message
      group: "group", // (optional) add group to message
      ongoing: false, // (optional) set whether this is an "ongoing" notification

      /* iOS and Android properties */
      title: "My Notification Title", // (optional)
      message: "My Notification Message", // (required)
      playSound: false, // (optional) default: true
      soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
    });
  };
  sendScheduledNotification = () => {
    let id = Math.floor(Math.random() * 10000);
    PushNotification.localNotificationSchedule({
      id: `${id}`,
      message: `Message id ${id}`, // (required)
      date: new Date(Date.now() + (10 * 1000)) // in 60 secs
    });
    this.setState({
      message: `Notification set with id ${id}`,
      notificationId: id,
    });
  };
  cancelNotification = () => {
    let { notificationId } = this.state;
    PushNotification.cancelLocalNotifications({ id: `${notificationId}` });

    this.setState({
      message: `Canceled notification ${notificationId}`,
      notificationId: undefined,
    });
  };
}

function mapStatetoProps(state, props) {
  return {
    testMessage: state.people.testMessage,
    contactsPermisison: state.permissions.contacts,
  }
}

function mapDispatchToProps(dispatch) {
  return bindActionCreators(Actions, dispatch);
}

export default connect(mapStatetoProps, mapDispatchToProps)(HomeScreen);

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  redText: {
    color: 'red',
  },
  button: {
    marginTop: 10,
  }
});