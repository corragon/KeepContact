import React from 'react';
import { AsyncStorage, StyleSheet, Text, View, Button } from 'react-native';
import Permissions from 'react-native-permissions';
import PushNotification from 'react-native-push-notification';
import Contacts from 'react-native-contacts';
import { createStackNavigator } from 'react-navigation';

class HomeScreen extends React.Component {
  static navigationOptions = {
    title: 'Home',
  };
  constructor(props) {
    super(props);
    this.state = {
      message: 'This text changes',
      permissions: 'Unknown',
      buttonPresses: 0,
      notificationId: undefined,
    };
  }
  // Check the status of a single permission
  async componentDidMount() {
    let loadState;
    try {
      loadState = await AsyncStorage.getItem('state');
      if (loadState !== null) {
        loadState = JSON.parse(loadState);
        this.setState(loadState);
        this.setState({ message: 'State loaded successfully' });
      }
    }
    catch (e) {
      console.log(e);
      this.setState({ message: 'State failed to load' + JSON.stringify(loadState) });
    }
    Permissions.check('contacts').then(response => {
      // Response is one of: 'authorized', 'denied', 'restricted', or 'undetermined'
      this.setState({ permissions: response })
    })
  }

  componentWillUnmount() {
  }

  // Request permission to access photos
  _requestPermission = () => {
    Permissions.request('contacts').then(response => {
      // Returns once the user has chosen to 'allow' or to 'not allow' access
      // Response is one of: 'authorized', 'denied', 'restricted', or 'undetermined'
      this.setState({ permissions: response })
    })
  };

  render() {
    let {message, permissions, buttonPresses} = this.state;
    return (
      <View style={styles.container}>
        <Text>{message}</Text>
        <Text>{permissions}</Text>
        <Text>Button pressed {buttonPresses} times</Text>
        <Button
          onPress={this.testMethod}
          title="Button"
          style={styles.button}/>
        <Button
          onPress={this.saveState}
          title="Save state"
          style={styles.button}/>
        <Button
          onPress={this.getContacts}
          title="Get a contact"
          style={styles.button}/>
        <Text>Notification buttons</Text>
        <Button
          onPress={this.sendNotification}
          title="Send Notification!"
          style={styles.button}/>
        <Button
          onPress={this.sendScheduledNotification}
          title="Schedule Notification!"
          style={styles.button}/>
        <Button
          onPress={this.cancelNotification}
          title="Cancel scheduled notification"
          style={styles.button}/>
        <Button
          title="Go to Details"
          onPress={this.goToDetails}
        />
      </View>
    );
  }

  /**
   * METHODS
   */
  goToDetails = () => {
    this.props.navigation.navigate('Details', {
      itemId: 66,
      otherParam: "Whatever mate",
    });
  };
  getContacts = () => {
    this.setState({ message: 'Attempting contacts....'});
    Contacts.getAll((err, contacts) => {
      if (err) throw err;
      if (contacts && contacts.length && contacts.length > 0) {
        let contact = contacts[0];
        this.setState({ message: `Got ${contacts.length} contacts`});
      }
      else {
        this.setState({ message: `${JSON.stringify(contacts).slice(0,40)}`});
      }
    });
  };
  testMethod = () => {
    let {buttonPresses} = this.state;
    buttonPresses += 1;
    this.setState({
      buttonPresses: buttonPresses,
      message: `Button pressed ${buttonPresses} times`
    });
  };
  saveState = async () => {
    try {
      await AsyncStorage.setItem('state', JSON.stringify(this.state));
      this.setState({ message: 'State saved successfully' });
    }
    catch (e) {
      this.setState({ message: 'State not saved: ' + e });
    }
  };
  sendNotification = () => {
    PushNotification.localNotification({
      /* Android Only Properties */
      id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      ticker: "My Notification Ticker", // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
      smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
      subText: "This is a subText", // (optional) default: none
      color: "red", // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      tag: 'some_tag', // (optional) add tag to message
      group: "group", // (optional) add group to message
      ongoing: false, // (optional) set whether this is an "ongoing" notification

      /* iOS and Android properties */
      title: "My Notification Title", // (optional)
      message: "My Notification Message", // (required)
      playSound: false, // (optional) default: true
      soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
  });
  };
  sendScheduledNotification = () => {
    let id = Math.floor(Math.random()*10000);
    PushNotification.localNotificationSchedule({
      id: `${id}`,
      message: `Message id ${id}`, // (required)
      date: new Date(Date.now() + (10 * 1000)) // in 60 secs
    });
    this.setState({
      message: `Notification set with id ${id}`,
      notificationId: id,
    });
  };
  cancelNotification = () => {
    let {notificationId} = this.state;
    PushNotification.cancelLocalNotifications({id: `${notificationId}`});

    this.setState({
      message: `Canceled notification ${notificationId}`,
      notificationId: undefined,
    });
  };
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  redText: {
    color: 'red',
  },
  button: {
    marginTop: 10,
  }
});


class DetailsScreen extends React.Component {
  render() {
    const {navigation} = this.props;
    const itemId = navigation.getParam('itemId', 'NO-ID');
    const otherParam = navigation.getParam('otherParam', 'default other param value');

    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text>Details Screen</Text>
        <Text>itemId: {JSON.stringify(itemId)}</Text>
        <Text>otherParam: {JSON.stringify(otherParam)}</Text>
        <Button
          title="Go to Details... again"
          onPress={() =>
            this.props.navigation.push('Details', {
              itemId: Math.floor(Math.random() * 100),
            })}
        />
        <Button
          title="Go to Home"
          onPress={() => this.props.navigation.navigate('Home')}
        />
        <Button
          title="Go back"
          onPress={() => this.props.navigation.goBack()}
        />
      </View>
    );
  }
}



const RootStack = createStackNavigator(
  {
    Home: HomeScreen,
    Details: DetailsScreen,
  },
  {
    initalRouteName: 'Home',
  }
);

export default class App extends React.Component {
  render() {
    return <RootStack/>;
  }
}